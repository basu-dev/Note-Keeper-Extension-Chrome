const d=document,htmlParser=new DOMParser;let notes=[],firstPage,secondPage,firstPageCloseBtn,secondPageCloseBtn,backupBtn,textarea,restoreBtn,noteCards,deleteAllBtn,input,fileInput,closeFileInputBtn,key;const select=sel=>d.querySelector(sel),add=(element,eventtype,cb)=>element.addEventListener(eventtype,cb);d.addEventListener("DOMContentLoaded",()=>{firstPage=select(".first-page"),secondPage=select(".second-page"),firstPageCloseBtn=select("#open-notes"),secondPageCloseBtn=select("#second-page-close"),backupBtn=select("#backup"),deleteAllBtn=select("#delete-all"),textarea=select("textarea"),input=select("input"),noteCards=select(".cards"),restoreBtn=select("#restore"),fileInput=select("input[type=file]"),closeFileInputBtn=select("#close-file-input"),add(firstPageCloseBtn,"click",_=>showFirstPage(!1)),add(secondPageCloseBtn,"click",_=>showFirstPage(!0)),add(textarea,"keyup",e=>saveNote(e.target.value,"body")),add(textarea,"paste",e=>saveNote(e.target.value,"body")),add(input,"keyup",e=>saveNote(e.target.value,"title")),add(backupBtn,"click",_=>backupNotes()),add(restoreBtn,"click",_=>fileInput.style.display="block"),add(closeFileInputBtn,"click",_=>fileInput.style.display="none"),add(deleteAllBtn,"click",_=>deleteAllNotes()),fileInput.addEventListener("change",e=>getBackupFromFile(e)),showFirstPage(!1)});const showFirstPage=truth=>{if(truth)fillTextarea(),firstPage.style.display="grid",secondPage.style.display="none";else{let notes=getNotes();showNotes(notes),firstPage.style.display="none",secondPage.style.display="grid"}},saveNote=async(body,which)=>{""==body.trim()&&""==input.value.trim()&&""==textarea.value.trim()&&deleteNote(key);let data=await getNote(key)?await getNote(key):{};data[key]?data[key]={...data[key],[which]:body}:(data[key]={title:"",body:""},data[key][which]=body),chrome.storage.sync.set(data,res=>{console.log(`saving ${JSON.stringify(data[key])}`)})},getNote=key=>new Promise((resolve,reject)=>{chrome.storage.sync.get(key,data=>{resolve(data)})}),fillTextarea=()=>{chrome.tabs.query({currentWindow:!0,active:!0},(function(tabs){key="Notes "+new URL(tabs[0].url).origin,chrome.storage.sync.get(key,data=>{console.log(data),data[key]&&(textarea.value=data[key].body,input.value=data[key].title)})}))},getNotes=()=>(chrome.storage.sync.get(null,data=>{console.log(data),notes=[],Object.keys(data).forEach(key=>{if(/Notes (.)+/.test(key)){let note={url:/Notes (.+)/.exec(key)[1],title:data[key].title,body:data[key].body};notes.push(note)}}),showNotes(notes)}),notes),deleteNote=key=>{/^Notes .+$/.test(key)&&chrome.storage.sync.remove(key,_=>getNotes())},deleteAllNotes=_=>{confirm("Do You Want To Delete All Notes?")&&chrome.storage.sync.get(null,data=>{Object.keys(data).forEach(key=>deleteNote(key)),getNotes()})},showNotes=notes=>{noteCards.innerHTML="";for(let i=0;i<notes.length;i++){let note=notes[i],html=htmlParser.parseFromString(`\n              <div class="card">\n                  <div class="card-header">${note.url}<button id="${note.url}">Del</button></div>\n                  <div class="card-title">${note.title}</div>\n                  <pre class="card-body">${note.body}</pre>\n              </div>\n          `,"text/html").querySelector(".card");html.querySelector("button").addEventListener("click",e=>{confirm("Do you want to delete  this note?")&&deleteNote(`Notes ${e.target.id}`)}),noteCards.appendChild(html)}},backupNotes=()=>{let a=d.createElement("a"),dt=new Date;a.setAttribute("download",`NotesBackup-${dt.getFullYear()}-${dt.getMonth()}-${dt.getDate()}-${dt.getHours()}-${dt.getMinutes()}-${dt.getSeconds()}.json`),a.href=`data:text/json;charset=utf-8,${encodeURIComponent(JSON.stringify(notes))}`,a.style.display="none",d.body.append(a),console.log(a),a.click(),select("[download]").remove()},reader=new FileReader,getBackupFromFile=e=>{let file=e.target.files[0];"application/json"==file.type&&/^NotesBackup-[0-9]+-[0-9]+-[0-9]+-[0-9]+-[0-9]+-[0-9]+.json$/.test(e.target.files[0].name)&&(reader.readAsText(file,"UTF-8"),reader.onloadend=e=>{console.log(e.target.result);let isValid=!0;["url","title","body"].forEach(x=>{e.target.result.includes(x)||(isValid=!1)}),isValid&&(notes=JSON.parse(e.target.result),notes[0].url&&notes[0].body&&notes[0].title&&(notes.forEach(note=>{const{url:url,body:body,title:title}=note;let data={};data[`Notes ${url}`]={title:title,body:body},chrome.storage.sync.set(data)}),getNotes()))})};